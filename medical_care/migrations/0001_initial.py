# Generated by Django 5.2 on 2025-05-11 18:44

import django.db.models.deletion
import taggit.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='CPRTimer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('current_phase', models.CharField(choices=[('compression', 'Надавливания'), ('ventilation', 'Вдохи')], default='compression', max_length=12)),
                ('cycle_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CyrillicTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Медицинский тег',
                'verbose_name_plural': 'Медицинские теги',
            },
        ),
        migrations.CreateModel(
            name='AssessmentStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255, verbose_name='Вопрос')),
                ('question_type', models.CharField(choices=[('binary', 'Да/Нет'), ('multiple', 'Выбор из вариантов')], default='binary', max_length=10, verbose_name='Тип вопроса')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('action', models.TextField(blank=True)),
                ('status_field', models.CharField(blank=True, choices=[('consciousness', 'Сознание'), ('breathing', 'Дыхание'), ('heartbeat', 'Сердцебиение')], max_length=15, null=True, verbose_name='Какое поле статуса обновлять')),
                ('no_next', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='no_steps', to='medical_care.assessmentstep')),
                ('yes_next', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='yes_steps', to='medical_care.assessmentstep')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('next_step', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='following_steps', to='medical_care.assessmentstep')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='medical_care.assessmentstep')),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('protocol', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='assessmentstep',
            name='emergency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='medical_care.emergencycondition'),
        ),
        migrations.CreateModel(
            name='EmergencyProtocol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('emergency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medical_care.emergencycondition')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medical_care.assessmentstep')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='PatientStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40)),
                ('consciousness', models.BooleanField(default=False)),
                ('breathing', models.BooleanField(default=False)),
                ('heartbeat', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('emergency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medical_care.emergencycondition')),
            ],
        ),
        migrations.CreateModel(
            name='TaggedEmergency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='medical_care.cyrillictag')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
